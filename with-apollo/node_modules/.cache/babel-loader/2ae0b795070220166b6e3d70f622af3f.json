{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/src/Profile/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($cursor: String) {\\n    viewer {\\n      repositories(\\n        first: 5\\n        orderBy: { direction: DESC, field: STARGAZERS }\\n        after: $cursor\\n      ) {\\n        edges {\\n          node {\\n            ...repository\\n          }\\n        }\\n        pageInfo {\\n          endCursor\\n          hasNextPage\\n        }\\n      }\\n    }\\n  }\\n\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport RepositoryList, { REPOSITORY_FRAGMENT } from '../Repository';\nimport Loading from '../Loading';\nimport ErrorMessage from '../Error';\nvar GET_REPOSITORIES_OF_CURRENT_USER = gql(_templateObject(), REPOSITORY_FRAGMENT);\n\nvar Profile = function Profile() {\n  return React.createElement(Query, {\n    query: GET_REPOSITORIES_OF_CURRENT_USER,\n    notifyOnNetworkStatusChange: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, function (_ref) {\n    var data = _ref.data,\n        loading = _ref.loading,\n        error = _ref.error,\n        fetchMore = _ref.fetchMore;\n    var viewer = data.viewer;\n\n    if (loading && !viewer) {\n      return React.createElement(Loading, {\n        isCenter: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n    }\n\n    if (error) {\n      return React.createElement(ErrorMessage, {\n        error: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(RepositoryList, {\n      loading: loading,\n      repositories: viewer.repositories,\n      fetchMore: fetchMore,\n      entry: 'viewer',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  });\n};\n\nexport default Profile;","map":{"version":3,"sources":["/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/src/Profile/index.js"],"names":["React","gql","Query","RepositoryList","REPOSITORY_FRAGMENT","Loading","ErrorMessage","GET_REPOSITORIES_OF_CURRENT_USER","Profile","data","loading","error","fetchMore","viewer","repositories"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AAEA,OAAOC,cAAP,IAAyBC,mBAAzB,QAAoD,eAApD;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,YAAP,MAAyB,UAAzB;AAEA,IAAMC,gCAAgC,GAAGN,GAAH,oBAqBlCG,mBArBkC,CAAtC;;AAwBA,IAAMI,OAAO,GAAG,SAAVA,OAAU;AAAA,SACd,oBAAC,KAAD;AACE,IAAA,KAAK,EAAED,gCADT;AAEE,IAAA,2BAA2B,EAAE,IAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIG,gBAAyC;AAAA,QAAtCE,IAAsC,QAAtCA,IAAsC;AAAA,QAAhCC,OAAgC,QAAhCA,OAAgC;AAAA,QAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;AAAA,QAChCC,MADgC,GACrBJ,IADqB,CAChCI,MADgC;;AAGxC,QAAIH,OAAO,IAAI,CAACG,MAAhB,EAAwB;AACtB,aAAO,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAE,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,QAAIF,KAAJ,EAAW;AACT,aAAO,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,WACE,oBAAC,cAAD;AACE,MAAA,OAAO,EAAED,OADX;AAEE,MAAA,YAAY,EAAEG,MAAM,CAACC,YAFvB;AAGE,MAAA,SAAS,EAAEF,SAHb;AAIE,MAAA,KAAK,EAAE,QAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GAvBH,CADc;AAAA,CAAhB;;AA4BA,eAAeJ,OAAf","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport RepositoryList, { REPOSITORY_FRAGMENT } from '../Repository';\nimport Loading from '../Loading';\nimport ErrorMessage from '../Error';\n\nconst GET_REPOSITORIES_OF_CURRENT_USER = gql`\n  query($cursor: String) {\n    viewer {\n      repositories(\n        first: 5\n        orderBy: { direction: DESC, field: STARGAZERS }\n        after: $cursor\n      ) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n\n  ${REPOSITORY_FRAGMENT}\n`;\n\nconst Profile = () => (\n  <Query\n    query={GET_REPOSITORIES_OF_CURRENT_USER}\n    notifyOnNetworkStatusChange={true}\n  >\n    {({ data, loading, error, fetchMore }) => {\n      const { viewer } = data;\n\n      if (loading && !viewer) {\n        return <Loading isCenter={true} />;\n      }\n\n      if (error) {\n        return <ErrorMessage error={error} />;\n      }\n\n      return (\n        <RepositoryList\n          loading={loading}\n          repositories={viewer.repositories}\n          fetchMore={fetchMore}\n          entry={'viewer'}\n        />\n      );\n    }}\n  </Query>\n);\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}