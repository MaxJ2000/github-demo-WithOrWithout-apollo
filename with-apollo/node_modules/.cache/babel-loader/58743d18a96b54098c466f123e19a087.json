{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/src/Organization/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($organizationName: String!, $cursor: String) {\\n    organization(login: $organizationName) {\\n      repositories(first: 5, after: $cursor) {\\n        edges {\\n          node {\\n            ...repository\\n          }\\n        }\\n        pageInfo {\\n          endCursor\\n          hasNextPage\\n        }\\n      }\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport RepositoryList, { REPOSITORY_FRAGMENT } from '../Repository';\nimport Loading from '../Loading';\nimport ErrorMessage from '../Error';\nvar GET_REPOSITORIES_OF_ORGANIZATION = gql(_templateObject(), REPOSITORY_FRAGMENT);\n\nvar Organization = function Organization(_ref) {\n  var organizationName = _ref.organizationName;\n  return React.createElement(Query, {\n    query: GET_REPOSITORIES_OF_ORGANIZATION,\n    variables: {\n      organizationName: organizationName\n    },\n    skip: organizationName === '',\n    notifyOnNetworkStatusChange: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, function (_ref2) {\n    var data = _ref2.data,\n        loading = _ref2.loading,\n        error = _ref2.error,\n        fetchMore = _ref2.fetchMore;\n\n    if (error) {\n      return React.createElement(ErrorMessage, {\n        error: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      });\n    }\n\n    var organization = data.organization;\n\n    if (loading && !organization) {\n      return React.createElement(Loading, {\n        isCenter: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(RepositoryList, {\n      loading: loading,\n      repositories: organization.repositories,\n      fetchMore: fetchMore,\n      entry: 'organization',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    });\n  });\n};\n\nexport default Organization;","map":{"version":3,"sources":["/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/src/Organization/index.js"],"names":["React","gql","Query","RepositoryList","REPOSITORY_FRAGMENT","Loading","ErrorMessage","GET_REPOSITORIES_OF_ORGANIZATION","Organization","organizationName","data","loading","error","fetchMore","organization","repositories"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AAEA,OAAOC,cAAP,IAAyBC,mBAAzB,QAAoD,eAApD;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,YAAP,MAAyB,UAAzB;AAEA,IAAMC,gCAAgC,GAAGN,GAAH,oBAgBlCG,mBAhBkC,CAAtC;;AAmBA,IAAMI,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAGC,gBAAH,QAAGA,gBAAH;AAAA,SACnB,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEF,gCADT;AAEE,IAAA,SAAS,EAAE;AACTE,MAAAA,gBAAgB,EAAhBA;AADS,KAFb;AAKE,IAAA,IAAI,EAAEA,gBAAgB,KAAK,EAL7B;AAME,IAAA,2BAA2B,EAAE,IAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQG,iBAAyC;AAAA,QAAtCC,IAAsC,SAAtCA,IAAsC;AAAA,QAAhCC,OAAgC,SAAhCA,OAAgC;AAAA,QAAvBC,KAAuB,SAAvBA,KAAuB;AAAA,QAAhBC,SAAgB,SAAhBA,SAAgB;;AACxC,QAAID,KAAJ,EAAW;AACT,aAAO,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAEA,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAHuC,QAKhCE,YALgC,GAKfJ,IALe,CAKhCI,YALgC;;AAOxC,QAAIH,OAAO,IAAI,CAACG,YAAhB,EAA8B;AAC5B,aAAO,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAE,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,WACE,oBAAC,cAAD;AACE,MAAA,OAAO,EAAEH,OADX;AAEE,MAAA,YAAY,EAAEG,YAAY,CAACC,YAF7B;AAGE,MAAA,SAAS,EAAEF,SAHb;AAIE,MAAA,KAAK,EAAE,cAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GA3BH,CADmB;AAAA,CAArB;;AAgCA,eAAeL,YAAf","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\n\nimport RepositoryList, { REPOSITORY_FRAGMENT } from '../Repository';\nimport Loading from '../Loading';\nimport ErrorMessage from '../Error';\n\nconst GET_REPOSITORIES_OF_ORGANIZATION = gql`\n  query($organizationName: String!, $cursor: String) {\n    organization(login: $organizationName) {\n      repositories(first: 5, after: $cursor) {\n        edges {\n          node {\n            ...repository\n          }\n        }\n        pageInfo {\n          endCursor\n          hasNextPage\n        }\n      }\n    }\n  }\n  ${REPOSITORY_FRAGMENT}\n`;\n\nconst Organization = ({ organizationName }) => (\n  <Query\n    query={GET_REPOSITORIES_OF_ORGANIZATION}\n    variables={{\n      organizationName,\n    }}\n    skip={organizationName === ''}\n    notifyOnNetworkStatusChange={true}\n  >\n    {({ data, loading, error, fetchMore }) => {\n      if (error) {\n        return <ErrorMessage error={error} />;\n      }\n\n      const { organization } = data;\n\n      if (loading && !organization) {\n        return <Loading isCenter={true} />;\n      }\n\n      return (\n        <RepositoryList\n          loading={loading}\n          repositories={organization.repositories}\n          fetchMore={fetchMore}\n          entry={'organization'}\n        />\n      );\n    }}\n  </Query>\n);\n\nexport default Organization;\n"]},"metadata":{},"sourceType":"module"}