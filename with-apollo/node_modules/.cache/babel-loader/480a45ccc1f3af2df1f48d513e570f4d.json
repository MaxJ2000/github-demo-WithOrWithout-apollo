{"ast":null,"code":"import _toConsumableArray from \"/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _TRANSITION_LABELS,\n    _TRANSITION_STATE,\n    _jsxFileName = \"/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/src/Issue/IssueList/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { Query, ApolloConsumer } from 'react-apollo';\nimport { withState } from 'recompose';\nimport { GET_ISSUES_OF_REPOSITORY } from './queries';\nimport IssueItem from '../IssueItem';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../Error';\nimport FetchMore from '../../FetchMore';\nimport { ButtonUnobtrusive } from '../../Button';\nimport './style.css';\nvar ISSUE_STATES = {\n  NONE: 'NONE',\n  OPEN: 'OPEN',\n  CLOSED: 'CLOSED'\n};\nvar TRANSITION_LABELS = (_TRANSITION_LABELS = {}, _defineProperty(_TRANSITION_LABELS, ISSUE_STATES.NONE, 'Show Open Issues'), _defineProperty(_TRANSITION_LABELS, ISSUE_STATES.OPEN, 'Show Closed Issues'), _defineProperty(_TRANSITION_LABELS, ISSUE_STATES.CLOSED, 'Hide Issues'), _TRANSITION_LABELS);\nvar TRANSITION_STATE = (_TRANSITION_STATE = {}, _defineProperty(_TRANSITION_STATE, ISSUE_STATES.NONE, ISSUE_STATES.OPEN), _defineProperty(_TRANSITION_STATE, ISSUE_STATES.OPEN, ISSUE_STATES.CLOSED), _defineProperty(_TRANSITION_STATE, ISSUE_STATES.CLOSED, ISSUE_STATES.NONE), _TRANSITION_STATE);\n\nvar isShow = function isShow(issueState) {\n  return issueState !== ISSUE_STATES.NONE;\n};\n\nvar updateQuery = function updateQuery(previousResult, _ref) {\n  var fetchMoreResult = _ref.fetchMoreResult;\n\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return _objectSpread({}, previousResult, {\n    repository: _objectSpread({}, previousResult.repository, {\n      issues: _objectSpread({}, previousResult.repository.issues, {}, fetchMoreResult.repository.issues, {\n        edges: [].concat(_toConsumableArray(previousResult.repository.issues.edges), _toConsumableArray(fetchMoreResult.repository.issues.edges))\n      })\n    })\n  });\n};\n\nvar prefetchIssues = function prefetchIssues(client, repositoryOwner, repositoryName, issueState) {\n  var nextIssueState = TRANSITION_STATE[issueState];\n\n  if (isShow(nextIssueState)) {\n    client.query({\n      query: GET_ISSUES_OF_REPOSITORY,\n      variables: {\n        repositoryOwner: repositoryOwner,\n        repositoryName: repositoryName,\n        issueState: nextIssueState\n      }\n    });\n  }\n};\n\nvar Issues = function Issues(_ref2) {\n  var repositoryOwner = _ref2.repositoryOwner,\n      repositoryName = _ref2.repositoryName,\n      issueState = _ref2.issueState,\n      onChangeIssueState = _ref2.onChangeIssueState;\n  return React.createElement(\"div\", {\n    className: \"Issues\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(IssueFilter, {\n    repositoryOwner: repositoryOwner,\n    repositoryName: repositoryName,\n    issueState: issueState,\n    onChangeIssueState: onChangeIssueState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), isShow(issueState) && React.createElement(Query, {\n    query: GET_ISSUES_OF_REPOSITORY,\n    variables: {\n      repositoryOwner: repositoryOwner,\n      repositoryName: repositoryName,\n      issueState: issueState\n    },\n    notifyOnNetworkStatusChange: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, function (_ref3) {\n    var data = _ref3.data,\n        loading = _ref3.loading,\n        error = _ref3.error,\n        fetchMore = _ref3.fetchMore;\n\n    if (error) {\n      return React.createElement(ErrorMessage, {\n        error: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      });\n    }\n\n    var repository = data.repository;\n\n    if (loading && !repository) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    }\n\n    if (!repository.issues.edges.length) {\n      return React.createElement(\"div\", {\n        className: \"IssueList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"No issues ...\");\n    }\n\n    return React.createElement(IssueList, {\n      issues: repository.issues,\n      loading: loading,\n      repositoryOwner: repositoryOwner,\n      repositoryName: repositoryName,\n      issueState: issueState,\n      fetchMore: fetchMore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    });\n  }));\n};\n\nvar IssueFilter = function IssueFilter(_ref4) {\n  var repositoryOwner = _ref4.repositoryOwner,\n      repositoryName = _ref4.repositoryName,\n      issueState = _ref4.issueState,\n      onChangeIssueState = _ref4.onChangeIssueState;\n  return React.createElement(ApolloConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, function (client) {\n    return React.createElement(ButtonUnobtrusive, {\n      onClick: function onClick() {\n        return onChangeIssueState(TRANSITION_STATE[issueState]);\n      },\n      onMouseOver: function onMouseOver() {\n        return prefetchIssues(client, repositoryOwner, repositoryName, issueState);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, TRANSITION_LABELS[issueState]);\n  });\n};\n\nvar IssueList = function IssueList(_ref5) {\n  var issues = _ref5.issues,\n      loading = _ref5.loading,\n      repositoryOwner = _ref5.repositoryOwner,\n      repositoryName = _ref5.repositoryName,\n      issueState = _ref5.issueState,\n      fetchMore = _ref5.fetchMore;\n  return React.createElement(\"div\", {\n    className: \"IssueList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, issues.edges.map(function (_ref6) {\n    var node = _ref6.node;\n    return React.createElement(IssueItem, {\n      key: node.id,\n      issue: node,\n      repositoryOwner: repositoryOwner,\n      repositoryName: repositoryName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    });\n  }), React.createElement(FetchMore, {\n    loading: loading,\n    hasNextPage: issues.pageInfo.hasNextPage,\n    variables: {\n      cursor: issues.pageInfo.endCursor,\n      repositoryOwner: repositoryOwner,\n      repositoryName: repositoryName,\n      issueState: issueState\n    },\n    updateQuery: updateQuery,\n    fetchMore: fetchMore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"Issues\"));\n};\n\nexport default withState('issueState', 'onChangeIssueState', ISSUE_STATES.NONE)(Issues);","map":{"version":3,"sources":["/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/src/Issue/IssueList/index.js"],"names":["React","Query","ApolloConsumer","withState","GET_ISSUES_OF_REPOSITORY","IssueItem","Loading","ErrorMessage","FetchMore","ButtonUnobtrusive","ISSUE_STATES","NONE","OPEN","CLOSED","TRANSITION_LABELS","TRANSITION_STATE","isShow","issueState","updateQuery","previousResult","fetchMoreResult","repository","issues","edges","prefetchIssues","client","repositoryOwner","repositoryName","nextIssueState","query","variables","Issues","onChangeIssueState","data","loading","error","fetchMore","length","IssueFilter","IssueList","map","node","id","pageInfo","hasNextPage","cursor","endCursor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Query, ApolloConsumer } from 'react-apollo';\nimport { withState } from 'recompose';\n\nimport { GET_ISSUES_OF_REPOSITORY } from './queries';\nimport IssueItem from '../IssueItem';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../Error';\nimport FetchMore from '../../FetchMore';\nimport { ButtonUnobtrusive } from '../../Button';\n\nimport './style.css';\n\nconst ISSUE_STATES = {\n  NONE: 'NONE',\n  OPEN: 'OPEN',\n  CLOSED: 'CLOSED',\n};\n\nconst TRANSITION_LABELS = {\n  [ISSUE_STATES.NONE]: 'Show Open Issues',\n  [ISSUE_STATES.OPEN]: 'Show Closed Issues',\n  [ISSUE_STATES.CLOSED]: 'Hide Issues',\n};\n\nconst TRANSITION_STATE = {\n  [ISSUE_STATES.NONE]: ISSUE_STATES.OPEN,\n  [ISSUE_STATES.OPEN]: ISSUE_STATES.CLOSED,\n  [ISSUE_STATES.CLOSED]: ISSUE_STATES.NONE,\n};\n\nconst isShow = issueState => issueState !== ISSUE_STATES.NONE;\n\nconst updateQuery = (previousResult, { fetchMoreResult }) => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    repository: {\n      ...previousResult.repository,\n      issues: {\n        ...previousResult.repository.issues,\n        ...fetchMoreResult.repository.issues,\n        edges: [\n          ...previousResult.repository.issues.edges,\n          ...fetchMoreResult.repository.issues.edges,\n        ],\n      },\n    },\n  };\n};\n\nconst prefetchIssues = (\n  client,\n  repositoryOwner,\n  repositoryName,\n  issueState,\n) => {\n  const nextIssueState = TRANSITION_STATE[issueState];\n\n  if (isShow(nextIssueState)) {\n    client.query({\n      query: GET_ISSUES_OF_REPOSITORY,\n      variables: {\n        repositoryOwner,\n        repositoryName,\n        issueState: nextIssueState,\n      },\n    });\n  }\n};\n\nconst Issues = ({\n  repositoryOwner,\n  repositoryName,\n  issueState,\n  onChangeIssueState,\n}) => (\n  <div className=\"Issues\">\n    <IssueFilter\n      repositoryOwner={repositoryOwner}\n      repositoryName={repositoryName}\n      issueState={issueState}\n      onChangeIssueState={onChangeIssueState}\n    />\n\n    {isShow(issueState) && (\n      <Query\n        query={GET_ISSUES_OF_REPOSITORY}\n        variables={{\n          repositoryOwner,\n          repositoryName,\n          issueState,\n        }}\n        notifyOnNetworkStatusChange={true}\n      >\n        {({ data, loading, error, fetchMore }) => {\n          if (error) {\n            return <ErrorMessage error={error} />;\n          }\n\n          const { repository } = data;\n\n          if (loading && !repository) {\n            return <Loading />;\n          }\n\n          if (!repository.issues.edges.length) {\n            return <div className=\"IssueList\">No issues ...</div>;\n          }\n\n          return (\n            <IssueList\n              issues={repository.issues}\n              loading={loading}\n              repositoryOwner={repositoryOwner}\n              repositoryName={repositoryName}\n              issueState={issueState}\n              fetchMore={fetchMore}\n            />\n          );\n        }}\n      </Query>\n    )}\n  </div>\n);\n\nconst IssueFilter = ({\n  repositoryOwner,\n  repositoryName,\n  issueState,\n  onChangeIssueState,\n}) => (\n  <ApolloConsumer>\n    {client => (\n      <ButtonUnobtrusive\n        onClick={() =>\n          onChangeIssueState(TRANSITION_STATE[issueState])\n        }\n        onMouseOver={() =>\n          prefetchIssues(\n            client,\n            repositoryOwner,\n            repositoryName,\n            issueState,\n          )\n        }\n      >\n        {TRANSITION_LABELS[issueState]}\n      </ButtonUnobtrusive>\n    )}\n  </ApolloConsumer>\n);\n\nconst IssueList = ({\n  issues,\n  loading,\n  repositoryOwner,\n  repositoryName,\n  issueState,\n  fetchMore,\n}) => (\n  <div className=\"IssueList\">\n    {issues.edges.map(({ node }) => (\n      <IssueItem\n        key={node.id}\n        issue={node}\n        repositoryOwner={repositoryOwner}\n        repositoryName={repositoryName}\n      />\n    ))}\n\n    <FetchMore\n      loading={loading}\n      hasNextPage={issues.pageInfo.hasNextPage}\n      variables={{\n        cursor: issues.pageInfo.endCursor,\n        repositoryOwner,\n        repositoryName,\n        issueState,\n      }}\n      updateQuery={updateQuery}\n      fetchMore={fetchMore}\n    >\n      Issues\n    </FetchMore>\n  </div>\n);\n\nexport default withState(\n  'issueState',\n  'onChangeIssueState',\n  ISSUE_STATES.NONE,\n)(Issues);\n"]},"metadata":{},"sourceType":"module"}