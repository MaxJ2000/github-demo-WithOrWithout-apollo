{"ast":null,"code":"import _toConsumableArray from \"/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/src/Comment/CommentList/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Fragment } from 'react';\nimport { Query } from 'react-apollo';\nimport { GET_COMMENTS_OF_ISSUE } from './queries';\nimport CommentItem from '../CommentItem';\nimport CommentAdd from '../CommentAdd';\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../Error';\nimport FetchMore from '../../FetchMore';\nimport './style.css';\n\nvar updateQuery = function updateQuery(previousResult, _ref) {\n  var fetchMoreResult = _ref.fetchMoreResult;\n\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return _objectSpread({}, previousResult, {\n    repository: _objectSpread({}, previousResult.repository, {\n      issue: _objectSpread({}, previousResult.repository.issue, {}, fetchMoreResult.repository.issue, {\n        comments: _objectSpread({}, previousResult.repository.issue.comments, {}, fetchMoreResult.repository.issue.comments, {\n          edges: [].concat(_toConsumableArray(previousResult.repository.issue.comments.edges), _toConsumableArray(fetchMoreResult.repository.issue.comments.edges))\n        })\n      })\n    })\n  });\n};\n\nvar Comments = function Comments(_ref2) {\n  var repositoryOwner = _ref2.repositoryOwner,\n      repositoryName = _ref2.repositoryName,\n      issue = _ref2.issue;\n  return React.createElement(Query, {\n    query: GET_COMMENTS_OF_ISSUE,\n    variables: {\n      repositoryOwner: repositoryOwner,\n      repositoryName: repositoryName,\n      number: issue.number\n    },\n    notifyOnNetworkStatusChange: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, function (_ref3) {\n    var data = _ref3.data,\n        loading = _ref3.loading,\n        error = _ref3.error,\n        fetchMore = _ref3.fetchMore;\n\n    if (error) {\n      return React.createElement(ErrorMessage, {\n        error: error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n    }\n\n    var repository = data.repository;\n\n    if (loading && !repository) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(CommentList, {\n      comments: repository.issue.comments,\n      loading: loading,\n      number: issue.number,\n      repositoryOwner: repositoryOwner,\n      repositoryName: repositoryName,\n      fetchMore: fetchMore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(CommentAdd, {\n      issueId: repository.issue.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  });\n};\n\nvar CommentList = function CommentList(_ref4) {\n  var comments = _ref4.comments,\n      loading = _ref4.loading,\n      repositoryOwner = _ref4.repositoryOwner,\n      repositoryName = _ref4.repositoryName,\n      number = _ref4.number,\n      fetchMore = _ref4.fetchMore;\n  return React.createElement(\"div\", {\n    className: \"CommentList\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, comments.edges.map(function (_ref5) {\n    var node = _ref5.node;\n    return React.createElement(CommentItem, {\n      key: node.id,\n      comment: node,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    });\n  }), React.createElement(FetchMore, {\n    loading: loading,\n    hasNextPage: comments.pageInfo.hasNextPage,\n    variables: {\n      cursor: comments.pageInfo.endCursor,\n      repositoryOwner: repositoryOwner,\n      repositoryName: repositoryName,\n      number: number\n    },\n    updateQuery: updateQuery,\n    fetchMore: fetchMore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Comments\"));\n};\n\nexport default Comments;","map":{"version":3,"sources":["/home/john/Documents/Code/github-demo-WithOrWithout-apollo/with-apollo/src/Comment/CommentList/index.js"],"names":["React","Fragment","Query","GET_COMMENTS_OF_ISSUE","CommentItem","CommentAdd","Loading","ErrorMessage","FetchMore","updateQuery","previousResult","fetchMoreResult","repository","issue","comments","edges","Comments","repositoryOwner","repositoryName","number","data","loading","error","fetchMore","id","CommentList","map","node","pageInfo","hasNextPage","cursor","endCursor"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { Query } from 'react-apollo';\n\nimport { GET_COMMENTS_OF_ISSUE } from './queries';\nimport CommentItem from '../CommentItem';\nimport CommentAdd from '../CommentAdd';\n\nimport Loading from '../../Loading';\nimport ErrorMessage from '../../Error';\nimport FetchMore from '../../FetchMore';\n\nimport './style.css';\n\nconst updateQuery = (previousResult, { fetchMoreResult }) => {\n  if (!fetchMoreResult) {\n    return previousResult;\n  }\n\n  return {\n    ...previousResult,\n    repository: {\n      ...previousResult.repository,\n      issue: {\n        ...previousResult.repository.issue,\n        ...fetchMoreResult.repository.issue,\n        comments: {\n          ...previousResult.repository.issue.comments,\n          ...fetchMoreResult.repository.issue.comments,\n          edges: [\n            ...previousResult.repository.issue.comments.edges,\n            ...fetchMoreResult.repository.issue.comments.edges,\n          ],\n        },\n      },\n    },\n  };\n};\n\nconst Comments = ({ repositoryOwner, repositoryName, issue }) => (\n  <Query\n    query={GET_COMMENTS_OF_ISSUE}\n    variables={{\n      repositoryOwner,\n      repositoryName,\n      number: issue.number,\n    }}\n    notifyOnNetworkStatusChange={true}\n  >\n    {({ data, loading, error, fetchMore }) => {\n      if (error) {\n        return <ErrorMessage error={error} />;\n      }\n\n      const { repository } = data;\n\n      if (loading && !repository) {\n        return <Loading />;\n      }\n\n      return (\n        <Fragment>\n          <CommentList\n            comments={repository.issue.comments}\n            loading={loading}\n            number={issue.number}\n            repositoryOwner={repositoryOwner}\n            repositoryName={repositoryName}\n            fetchMore={fetchMore}\n          />\n\n          <CommentAdd issueId={repository.issue.id} />\n        </Fragment>\n      );\n    }}\n  </Query>\n);\n\nconst CommentList = ({\n  comments,\n  loading,\n  repositoryOwner,\n  repositoryName,\n  number,\n  fetchMore,\n}) => (\n  <div className=\"CommentList\">\n    {comments.edges.map(({ node }) => (\n      <CommentItem key={node.id} comment={node} />\n    ))}\n\n    <FetchMore\n      loading={loading}\n      hasNextPage={comments.pageInfo.hasNextPage}\n      variables={{\n        cursor: comments.pageInfo.endCursor,\n        repositoryOwner,\n        repositoryName,\n        number,\n      }}\n      updateQuery={updateQuery}\n      fetchMore={fetchMore}\n    >\n      Comments\n    </FetchMore>\n  </div>\n);\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}